\documentclass[a4paper]{report}
\usepackage{Rnews}
\usepackage[round]{natbib}
\bibliographystyle{abbrvnat}

%\documentclass[oneside,letterpaper]{scrartcl}
\usepackage[utf8]{inputenc}
%\usepackage[pdftex]{graphicx}
\usepackage{hyperref}
%\usepackage{fullpage}
\usepackage{alltt}

\begin{document}
\begin{article}

\title{An introduction to rggobi}
%\VignetteIndexEntry{An introduction to rggobi}
\author{Hadley Wickham, Michael Lawrence}

\maketitle

\section*{Introduction}

GGobi is a tool for highly interactive and dynamic graphic analysis.  It allows you to explore your data with tools such as linked brushing and the tour.  This article assumes some familiarity with GGobi.  If you would like find out more, or see examples of GGobi in use, please see the GGobi webpage: \url{http://www.ggobi.org}.  GGobi exploratory graphics provide a natural complement to R's high quality static graphics and powerful statistical algorithms.  The {\tt rggobi} package connects R to GGobi, so that you can easily transition between analysis and exploration.  Obviously, we can't recreate the dynamic and interactive nature of GGobi in this document so we recommend that you try these examples out at home.  

The current version of {\tt rggobi} focuses on three main tasks:

\begin{itemize}
	\item Getting data into and out of GGobi.
	\item Modifying observation-level attributes, or manual brushing.
	\item Basic plot control.
\end{itemize}

We'll discuss each of these in turn, providing the basic syntax and some examples of what you can do.  We have tried to ensure that all the functions are well documented, so you can get more details and examples through the online help: {\tt ?ggobi}.

\section*{Data}\label{sec:data}

Getting data into GGobi is really easy: {\tt g <- ggobi(mtcars)}, which returns a {\tt GGobi} object.  Getting data out isn't much harder, you just need to index that {\tt GGobi} object: by position, {\tt g[1]}, or by name, {\tt g["mtcars"]}.  These return {\tt GGobiData} objects which are linked to the data in GGobi.  These act just like a regular data frame, except all changes will be synced with GGobi.  You can get a static copy of the data using {\tt as.data.frame}, or save the dataset in GGobi's native XML format using {\tt ggobi\_save\_xml}.

As changes to the data are updated in GGobi immediately, you can use these functions to create animations.  This example shows simple random motion. [Any better suggestions?]

\begin{verbatim}
rw <- data.frame(
  x=runif(100, -1, 1), 
  y=runif(100, -1, 1)
)
g <- ggobi(rw)
x <- g["rw"]

while(TRUE) {
  x[,1] <- x$x + runif(100, -.04, .04)
  x[,2] <- x$y + runif(100, -.04, .04)
}
\end{verbatim}

[Picture here]

Adding more datasets to the GGobi instance is easy too: {\tt g["mtcars2"] <- mtcars} will add another dataset named ``mtcars2''.  You can also load any file that GGobi recognises by passing the path to the file instead.  Along with the {\tt ggobi\_find\_file} function, which locates files in the GGobi installation directory, this makes it easy to load GGobi sample data.  This example loads the olives dataset included with GGobi.

\begin{alltt}
ggobi(ggobi_find_file("data", "olives.csv"))
\end{alltt}

Edge data sets are a special type of dataset in GGobi.  Instead of representing points, the represent connections, or edges, between points.  An edge dataset has an two invisible columns which store the names of the source and destination observations.  You can convert a regular dataset into a edge dataset with the {\tt edges} function.  This takes a matrix with two columns, source and destination, containing the names of points to join.  Typically, you will need to add a new data frame with number of rows equal to the number of edges you want to add.  Rggobi also provides a convenient function for creating edge sets for longitudinal data, {\tt ggobi\_longitudinal}.  This will link together observations in sequential time order and is great for looking at time series or longitudinal data.

[Picture here]

\section*{Modifying observation-level attributes, or manual brushing}\label{sec:meta_data}

Brushing lets you interactively change the attributes of observations in a dataset.  You can also do this manually, from within R, using the following functions:

\begin{itemize}
	\item colour, with {\tt glyph\_colour}
	\item size, with  {\tt glyph\_size}
	\item shape, with {\tt glyph\_shape}
	\item shadowed, with {\tt shadowed}
	\item excluded, with {\tt excluded}
\end{itemize}

Each of these get or set the current values for the specified {\tt GGobiData}.  The getters are useful for retrieving information that you have created while brushing in GGobi, and the setters can be used to change the appearance of points based on model information, or to create animations.  

Another function {\tt selected}, returns a logical vector indicating if each point is currently under the brush.  This could be used to further explore interesting or unusual points.

\section*{Plots}\label{sec:plots}

Currently, plot control with {\tt rggobi} is rather primitive, and can only create or modify {\tt GGobiDisplay} objects.  A {\tt GGobiDisplay} represents all the plots present in a window.  This may be a single plot, in the case of a scatterplot, or many plots, in the case of scatterplot matrix.

To retrieve a list of displays, use the {\tt displays} function.  To create a new display use the {\tt display} method on a {\tt GGobiData} object.  You'll need to specify the type of plot you want (...) and which variables to include.  Later on, you can get and set the variables in a plot using the {\tt variable} and {\tt variable<-} methods.  Because of the range of plot types in GGobi, variables should be specified as a list containing {\tt X}, {\tt Y} and {\tt Z} character vectors listing the variable or variables to be set in each component.

Types of displays

\begin{tabular}{ccc}
Name & Description & Variables\\
\hline
1D Plot                      & ASH plot & 1 X\\
XY Plot                      & Scatterplot & 1 X and 1 Y\\
1D Tour                      & ASH tour & n X variables\\
Rotation                     & 3d rotation & 1 X, 1 Y and 1 Z\\
2D Tour                      & 2d tour & n X\\
2x1D Tour                    & Constrained 2d tour & n X and n Y\\
Scatterplot Matrix           &  & n X\\
Parallel Coordinates Display &  & n X\\
Time Series                  &  & 1 X and n Y\\
Barchart                     &  & 1 X\\
\end{tabular}

Another useful feature is the ability to save the contents of a GGobi display to a file on disk.  This is what we used to create the images in this document.  This creates an exact (raster) copy of the GGobi display.  If you want to create publication quality graphics from GGobi, have a look at the {\tt DescribeDisplay} plugin and package at  \url{http://www.ggobi.org/describe-display}.  These create R versions of your GGobi plots.

\section*{Conclusion}\label{sec:conclusion}

GGobi is a powerful tool for data exploration, and the integration with R that {\tt rggobi} allows a seamless workflow between analysis and exploration.  Much of the potential of {\tt rggobi} has yet to be explored, but some ideas are demonstrated in the {\tt classifly} package, \url{http://had.co.nz/classifly} which visualises high-dimensional classification boundaries.  We are also keen to hear about your work---if you develop a package using {\tt rggobi} please let us know so we can highlight your work on the GGobi homepage.

\end{article}
\end{document}
